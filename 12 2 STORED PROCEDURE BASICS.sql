
-- QUERY 1:	HOW TO CREATE & CONNECT TO DATABASE AT ONCE?
CREATE DATABASE	 Employee_Database
GO
USE Employee_Database


-- QUERY 2: HOW TO CREATE TABLE, STORE DATA ?
CREATE TABLE EMPLOYEE_INFO
(
EMPID INT PRIMARY KEY,
EMP_NAME CHAR(30),		 
EMP_COUNTRY VARCHAR(40) check (EMP_COUNTRY in ('CANADA', 'USA', 'India')), 
EMPSAL FLOAT	 check (EMPSAL > 100000)		 
) 


INSERT  INTO EMPLOYEE_INFO VALUES (1001, 'SAI', 'CANADA', 999999)
INSERT	INTO EMPLOYEE_INFO VALUES (1002, 'SAM', 'CANADA', 888888)
INSERT  INTO EMPLOYEE_INFO VALUES (1003, 'JON', 'CANADA', 999999);
INSERT	INTO EMPLOYEE_INFO VALUES (1004, 'AMI', 'CANADA', 777777);
INSERT  INTO EMPLOYEE_INFO VALUES (1005, 'JOE', 'USA', 999999), (1006, 'ANI', 'USA', 999999);
INSERT	INTO EMPLOYEE_INFO VALUES (1007, 'AMI', 'USA', 777777), (1008, 'AMIN', 'INDIA', 999999);
INSERT	INTO EMPLOYEE_INFO VALUES (1009, 'KIR', 'INDIA', 777777)  
INSERT	INTO EMPLOYEE_INFO VALUES (1010, 'JENY', 'USA', 9999999)  
INSERT	INTO EMPLOYEE_INFO VALUES (1011, 'JENISHA', 'INDIA', 99999999)  



-- QUERY 4: HOW TO REPORT EMPLOYEES FROM CANADA?
SELECT * FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = 'CANADA'


-- QUERY 5: HOW TO REPORT EMPLOYEES FROM USA?
SELECT * FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = 'USA'


-- QUERY 6: HOW TO REPORT EMPLOYEES FROM A GIVEN COUNTRY?
CREATE PROCEDURE SP_REPORT_EMPLOYEES (@COUNTRY VARCHAR(30))
AS
SELECT * FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = @COUNTRY


-- QUERY 7: HOW TO EXECUTE OR TEST ABOVE PROCEDURE?
EXECUTE SP_REPORT_EMPLOYEES @COUNTRY = 'CANADA'


-- QUERY 8: HOW TO EXECUTE OR TEST ABOVE PROCEDURE?
EXECUTE SP_REPORT_EMPLOYEES @COUNTRY = 'USA'


-- QUERY 9: WRITE A PROCEDURE TO VALIDATE INPUT DATA AND INSERT INTO THE BASE TABLE?
CREATE PROCEDURE SP_VALIDATE_INPUTDATA (@ID INT, @NAME VARCHAR(30), @COUNTRY VARCHAR(30), @SAL INT)
AS
BEGIN
IF (@COUNTRY = 'CANADA' AND @SAL >= 120000) OR (@COUNTRY = 'USA' AND @SAL >= 100000) 
INSERT INTO EMPLOYEE_INFO VALUES (@ID, @NAME, @COUNTRY, @SAL)
ELSE
PRINT 'INVALID INPUT. TRY AGAIN.'
END


-- QUERY 9: HOW TO TEST ABOVE SP (STORED PROCEDURE)?
EXECUTE SP_VALIDATE_INPUTDATA  2001, 'SAI', 'CANADA', 2000
EXEC	SP_VALIDATE_INPUTDATA  4001, 'SAI', 'CANADA', 200000


-- QUERY 10: HOW TO VERIFY ABOVE DML OPERATION ?
SELECT * FROM EMPLOYEE_INFO


-- WHEN TO USE VIEWS	?		TO STORE SELECT QUERY WITH KNOWN CONDITION VALUES.								COUNTRY = 'CANADA'
-- WHEN TO USE PROCEDURES	?	TO STORE SELECT, DDL, DML QUERIES WITH UNKNOWN CONDITION VALUES.				COUNTRY = @COUNTRYPARAM


-- NOTE:	A PROCEDURE CAN INCLUDE UPTO 21000 PARAMETERS.
-- NOTE:	A DATABASE CAN HAVE ANY NUMBER OF PROCEDURES.
 

-- WE CREATED FEW PROCEDURES. HOW TO VERIFY THEM IN THE DATABASE?
-- FROM SSMS TOOL : GO TO LEFT: OBJECT EXPLORER > EXPAND SERVER, DATABASE > PROGRAMMABILITY > SPs > WE SEE ABOVE SPs

-- HOW TO FIND THE DEFNITION OF A PROCEDURE?
-- FROM SSMS  TOOL : RIGHT CLICK PROCEDURE > SCRIPT > CREATE 



-- SYSTEM (PREEFINED) PROCEDURES:
EXEC SP_HELP 'SP_VALIDATE_INPUTDATA'			-- THIS SYSTEM PROCEDURE WILL REPORT THE PROPERTIES OF A TABLE / VIEW / SP / FUNCTION
EXEC SP_HELPTEXT 'SP_VALIDATE_INPUTDATA'		-- THIS SYSTEM PROCEDURE WILL REPORT THE DEFINITION (QUERY) OF A VIEW / SP / FUNCTION
EXEC SP_PKEYS 'EMPLOYEE_INFO'					-- THIS SYSTEM PROCEDURE WILL REPORT THE LIST OF PRIMARY KEY COLUMNS IN THE TABLE
EXEC SP_HELPINDEX 'EMPLOYEE_INFO'				-- THIS SYSTEM PROCEDURE WILL REPORT THE LIST OF INDEXES IN THE TABLE. 

EXEC SP_RENAME 'EMPLOYEE_INFO', 'EMPLOYEE_INFO_NEW'		-- THIS SYSTEM PROCEDURE WILL RENAME THE GIVEN OBJECT


ALTER PROCEDURE SP_VALIDATE_INPUTDATA (@ID INT, @NAME VARCHAR(30), @COUNTRY VARCHAR(20), @SAL FLOAT)
AS
BEGIN
IF (@COUNTRY = 'USA' AND @SAL > 100000) 
	INSERT  INTO EMPLOYEE_INFO_NEW VALUES (@ID, @NAME, @COUNTRY, @SAL)
ELSE
	PRINT 'INVALID INPUT'
END


-- HOW TO TEST ABOVE PROCEDURE?
EXEC SP_HELPTEXT 'SP_VALIDATE_INPUTDATA'

-- HOW TO OPTIMIZE A PROCEDURE?
EXEC SP_RECOMPILE 'SP_VALIDATE_INPUTDATA'

-- COMPILATION					:	A MECHANISM TO CONVERT HIGH LEVEL SQL CODE INTO MACHINE CODE.
-- RECOMPILE					:	TO FORCE THE PROCESS OF COMPILATION ONCE AGAIN. 
-- SCENARIO FOR RECOMPILATION	:	WE NEED TO RECOMPILE PROCEDURES IF THEY RUN SLOW DUE TO INCREASE OF DATA OR RENAME OR ALTER @ TABLE. 




