
-- UPDATABLE VIEWS:	SUCH VIEWS THAT CAN ACCEPT DML OPERATIONS AND DISTRIBUTE DATA TO MULTIPLE TABLES. DESIGN TRIGGERS ON VIEWS.
USE TEMPDB 


CREATE TABLE FLIGHT
(	
	CRAFT_CODE VARCHAR(30),
	SOURCE VARCHAR(30),
	DESTINATION VARCHAR(30)
)

CREATE TABLE RESERVATIONS
(	
	CRAFT_CODE VARCHAR(30),
	NO_OF_SEATS INT,
	CLASS VARCHAR(30)
)


-- REQUIREMENT:	HOW TO INSERT DATA INTO BOTH FLIGHT TABLE AND RESERVATION TABLE TOGETHER? SINGLE TRANSACTION.
CREATE VIEW VW_FLIGHT_RESERVATIONS
AS
SELECT FLIGHT.CRAFT_CODE, SOURCE, DESTINATION, 
NO_OF_SEATS, CLASS FROM FLIGHT
INNER JOIN 
RESERVATIONS
ON
FLIGHT.CRAFT_CODE = RESERVATIONS.CRAFT_CODE



SELECT * FROM VW_FLIGHT_RESERVATIONS;


-- ISSUE
INSERT INTO VW_FLIGHT_RESERVATIONS VALUES ('EMI01', 'CITY1', 'CITY2', 11, 'ECO')		-- ERROR


-- SOLUTION:
-- UPDATEBLE VIEW. MEANS, TO DEFINE A TRIGGER ON THE VIEW AND SPECIFY DATA DISTRIBUTION LOGIC.
CREATE TRIGGER trigDataDistr
ON VW_FLIGHT_RESERVATIONS
INSTEAD OF INSERT
AS
BEGIN			-- TO SPECIFY START OF TRIGGER CODE
BEGIN TRY		-- IF ANY ERROR WITHIN THIS TRY BLOCK THEN "CATCH" BLOCK IS AUTO EXECUTED.
			BEGIN TRANSACTION
			DECLARE	@CODE VARCHAR(30)		-- DECLARE IS A KEYWORD TO DEFINE VARIABLES. TEMPORARY PLACEHOLDERS FOR DATA. STORED IN MEMORY.
			DECLARE @SOURCE VARCHAR(30), @DEST VARCHAR(40), @SEATS INT, @CLASS VARCHAR(30)

			SELECT @CODE = CRAFT_CODE FROM INSERTED
			SELECT @SOURCE = SOURCE FROM INSERTED
			SELECT @DEST = DESTINATION FROM INSERTED
			SELECT @SEATS = NO_OF_SEATS FROM INSERTED
			SELECT @CLASS = CLASS FROM INSERTED

			INSERT INTO FLIGHT		 VALUES (@CODE, @SOURCE, @DEST)
			INSERT INTO RESERVATIONS VALUES (@CODE, @SEATS, @CLASS)
			COMMIT TRANSACTION
END TRY

BEGIN CATCH
			ROLLBACK TRANSACTION
END CATCH 
END				-- TO SPECIFY END OF TRIGGER CODE


-- VERIFY THE SOLUTION
INSERT INTO VW_FLIGHT_RESERVATIONS VALUES ('EMI01', 'CITY1', 'CITY2', 11, 'ECO')		-- NO ERROR
SELECT * FROM FLIGHT 
SELECT * FROM RESERVATIONS


INSERT INTO VW_FLIGHT_RESERVATIONS VALUES ('EMI02', 'CITY3', 'CITY4', 22, 'ECO')		-- NO ERROR
SELECT * FROM FLIGHT 
SELECT * FROM RESERVATIONS

-- FINAL SOLUTION:
CREATE PROCEDURE spValidateInsert ( @CODE VARCHAR(30), @SOURCE VARCHAR(30), @DEST VARCHAR(40), 
									@SEATS INT, @CLASS VARCHAR(30) )
AS
BEGIN
IF @SEATS <= 30
	INSERT INTO VW_FLIGHT_RESERVATIONS VALUES (@CODE, @SOURCE, @DEST, @SEATS, @CLASS)
ELSE
	PRINT 'ERROR, INVALID INSERT. TRY AGAIN.'
END


-- VERIFY:
EXEC spValidateInsert 'EMI03', 'CITY5', 'CITY6', 22, 'ECO' 
SELECT * FROM FLIGHT 
SELECT * FROM RESERVATIONS

/*
END USER APPS WILL CALL STORED PROCEDURE [.NET, JAVA...]
STORED PROCEDURE WILL CALL VIEW
VIEW WILL CALL TRIGGER
TRIGGER WILL DISTRIBUTE DATA TO FLIGHT & RESERVATION TABLES. IN A SINGLE TRANSACTION.
*/

-- TASK 1:  WRITE A PROCEDURE TO REPORT LIST OF ALL RESERVATIONS FOR A GIVEN FLIGHT (MEANS: YOU NEED TO SUPPLY FLIGHT DYNAMICALLY @ RUNTIME?
-- TASK 2:  WRITE A PROCEDURE TO REPORT LIST OF AL SUCH FLIGHTS WITH MORE THAN GIVEN COUNT OF RESERVATIONS?
-- TASK 3:  WRITE A PROCEDURE TO VALIDATE AND INSERT DATA INTO RESERVATIONS IN SUCH A WAY THE MINIMUM SEATS SHOULD BE 10
-- TASK 4:  WRITE A PROCEDURE TO VALIDATE AND INSERT DATA INTO FLIGHT TABLE IN SUCH A WAY SOURCE CITY AND DESTINATION CITY ARE DIFFERENT.

 

 CHATGPT

 CREATE OR ALTER TRIGGER BankTrigger1
ON Bank_Info.Branches
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Example of an insert that correctly uses column list and does not insert into identity column
    INSERT INTO Bank_Info.Branches (Column1, Column2, Column3)
    SELECT Column1, Column2, Column3
    FROM inserted;

    -- If you need to insert into the identity column:
    SET IDENTITY_INSERT Bank_Info.Branches ON;
    
    INSERT INTO Bank_Info.Branches (brBranchID_pk, Column1, Column2)
    SELECT brBranchID_pk, Column1, Column2
    FROM inserted;

    SET IDENTITY_INSERT Bank_Info.Branches OFF;
END;
