
CREATE DATABASE INDEXDATABASENEW
GO
USE INDEXDATABASENEW
GO

CREATE TABLE STUDENTS
(
STD_ID INT, 
STD_NAME VARCHAR(30), 
STD_AGE FLOAT, 
STD_COURSE VARCHAR(30)
)

INSERT STUDENTS VALUES	(1001, 'AMIN', 23.5,'COMPUTERS'),  (1002, 'SAM', 23.5,'CIVIL'), 
				 (1003, 'AMINI', 23.5,'CIVIL'),  (1004, 'JOHN', 23.5,'COMPUTERS'), 
				 (1005, 'JEFF', 23.5,'COMPUTERS')

SELECT * FROM   STUDENTS						


SP_HELPINDEX 'STUDENTS'


-- EXAMPLE FOR CLUSTERED INDEX
CREATE CLUSTERED INDEX INDX1  ON STUDENTS (STD_ID ASC) 
WITH 
(
SORT_IN_TEMPDB = ON,
fillfactor = 80,			-- means, each index page is 80% full. remaining 20% is left empty for future updates.
pad_index = on,				-- means, above Fill Factor is applied to Data Pages. 
online  = on				-- means, ONLINE INDEX. Index remains online during its creation. 
)

-- HOW TO VERIFY THE INDEX USAGE?	  		 
-- Right click anywhere in the session window > include LIVE QUERY STATISTICS. THEN EXECUTE BELOW QUERY:
SELECT * FROM   STUDENTS						-- INDEX SCAN

-- INDX1 IS IN USE.  INDEX SCAN : COMPLETE INDEXED COLUMN IS ACCESSED / READ


-- YOU WANTED TO SEARCH FOR STD_COURSE COLUMN. THEN DEFINE INDEX ON THAT COLUMN:
CREATE NONCLUSTERED INDEX INDX2  ON STUDENTS (STD_COURSE)

SELECT * FROM   STUDENTS WHERE STD_COURSE =   'COMPUTERS'			-- CLUSTERED INDEX IS IN USE !!


SELECT STD_COURSE FROM   STUDENTS WHERE STD_COURSE =   'COMPUTERS'	-- NON CLUSTERED INDEX IS IN USE !!


-- INCLUDED INDEX : Such indexes that include additional columns that are used in the query.

CREATE NONCLUSTERED INDEX INDXV2 ON STUDENTS (STD_COURSE) INCLUDE (STD_ID, STD_NAME, STD_AGE)
SELECT STD_ID, STD_NAME, STD_COURSE, STD_AGE FROM   STUDENTS WHERE STD_COURSE = 'COMPUTERS'	 -- INDX3 IS IN USE. INDEX SEEK.

-- INDEX SCAN		:		COMPLETE INDEX IS SCANNED TO REPORT THE DATA
-- INDEX SEEK		:		FILTERED PAGES ARE SCANNED TO REPORT THE DATA. 


-- COLUMNSTORE NON CLUSTERED INDEX:			-- ONLY UNIQUE VALUES OF THE COLUMN ARE INDEXED. TO SAVE SPACE. DWH	
CREATE NONCLUSTERED COLUMNSTORE INDEX INDX4 ON STUDENTS (STD_NAME) 
SELECT STD_NAME FROM STUDENTS	GROUP BY STD_NAME  


-- FILTERED INDEX : This Index will be created on few specific rows of the table.
--APPLICABLE FOR BOTH CLUSTERED AS WELL AS NONCLUSTERED INDEXES. EX: TO INDEX ACTIVE PRODUCTS 
CREATE NONCLUSTERED INDEX INDX5 ON STUDENTS (STD_COURSE) WHERE STD_COURSE = 'COMPUTERS'
SELECT * FROM STUDENTS	WHERE STD_COURSE = 'COMPUTERS'


-- ONLINE INDEX:	-- THE ALREADY CREATED PART OF INDEX IS READILY USED BY THE QUERIES. CLUSTERED & NON CLUSTERED.  8 MIN > 80% INDEX 
CREATE NONCLUSTERED INDEX INDX6 ON STUDENTS (STD_NAME) WITH (ONLINE  = ON)


-- COVERING INDEX	:	SUCH INDEX THAT CONTAINS ALL COLUMNS USED IN A GIVEN QUERY.
SELECT STD_ID, STD_NAME, STD_COURSE, STD_AGE FROM STUDENTS	WHERE STD_COURSE = 'COMPUTERS'		-- INDX3 IS THE COVERING INDEX FOR THIS QUERY

SELECT DISTINCT STD_NAME FROM STUDENTS						-- INDX4 IS THE COVERING INDEX FOR THIS QUERY


-- QUERY OPTIMIZER IS AN INTERNAL COMPONENT THAT DECIDES THE BEST WAY TO EXECUTE THE QUERY.
-- MEANS, QUERY OPTIMIZER WILL DECIE THE BEST INDEX TO EXECUTE THE QUERY.
-- 1ST PRIORITY IS GIVEN FOR COVERING INDEX. NEXT PRIORITY FOR CLUSTERED INDEX.



--INDEXED VIEW  = MATERIALIZED VIEW
CREATE VIEW VW_STD_DATA
WITH SCHEMABINDING				-- THIS PREVENTS STRUCTURAL CHANGES ON THE BASE TABLE. EX: WE CANNOT RENAME OR REMOVE THE STD_ID COLUMN	 
AS
SELECT STD_ID, STD_AGE, STD_COURSE, STD_NAME FROM DBO.STUDENTS 


-- TESTING SCHEMABINDING:
ALTER TABLE STUDENTS DROP COLUMN STD_ID


-- HOW TO CONVERT ABOVE VIEW INTO INDEXED VIEW ?
CREATE UNIQUE CLUSTERED INDEX MATINDX ON VW_STD_DATA (STD_ID)		-- QUERY + RESULT ARE STORED IN VIEW


/*
QUESTION	:	WHAT ARE THE RULES TO DEFINE AN INDEXED VIEW IN MICROSOFT SQL SERVER?
	RULE 1	:	WE NEED TO DEFINE THE VIEW WITH "SCHEMABINDING" OPTION. THIS IS TO PREVENT STRUCTURAL CHANGES TO THE BASE TABLE.
	RULE 2	:	WE NEED TO DEFINE UNIQUE CLUSTERED INDEX ON THE VIEW. 
*/











-- HOW TO ACCESS INDEXED VIEW?
SELECT * FROM VW_STD_DATA			-- REPORTS DATA FROM THE VIEW ITSELF. NOT FROM THE TABLE. 
				

/*
  WHEN TO USE WHICH INDEX?
	USE CLUSTERED INDEX FOR KEY COLUMN SEARCH.   EX: JOINS
	USE INCLUDED NONCLUSTERED INDEX FOR OTHER SEARCH OPERATIONS : WHERE, HAVING... 
	USE FILTERED INDEX FOR WHERE, JOIN, HAVING CONDITIONS. FEW SPECIFIC ROWS OF THE TABLE. 
	USE COLUMNSTORE INDEX FOR DISTINCT & GROUP BY QUERIES.
	USE INDEXED VIEW FOR FREQUENT RUNNING QUERIES. REPEATABLE READS.  EX: RECURRING REPORTS. 
*/









