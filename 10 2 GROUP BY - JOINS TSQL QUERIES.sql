
CREATE DATABASE AmazonDatabase

USE AmazonDatabase

-- TABLE 1:  CUSTOMERS_DATA TABLE
CREATE TABLE CUSTOMERS_DATA
(
CustomerKey INT PRIMARY KEY,			 
CustomerName	VARCHAR(30) NOT NULL, 
Gender		CHAR	NOT NULL CHECK (GENDER IN ('M','F')),
MStatus		CHAR	NOT NULL CHECK (MStatus IN ('M','S')),
Income		FLOAT	NOT NULL CHECK (Income >= 10000)
)


-- TABLE 2:	 PRODUCTS_DATA TABLE
CREATE TABLE PRODUCTS_DATA
(
ProductKey INT,
ProductName	VARCHAR(30) NOT NULL,
Class		CHAR NOT NULL CHECK (Class IN ('L','M','H')),
Color		VARCHAR(20) NOT NULL CHECK (Color IN ('White','Black', 'Red', 'Green','Other')),
UnitPrice	FLOAT	NOT NULL CHECK (UnitPrice >= 1)	,
CONSTRAINT PK_ProductKey PRIMARY KEY (ProductKey),		-- HERE, WE CAN MENTION ONE OR MORE COLUMNS. COMPOSITE KEY
 YEAR   INT  NOT NULL
)

   
-- TABLE 3:	SALES_DATA TABLE				 
CREATE TABLE SALES_DATA
(
SaleID			INT IDENTITY (100001, 1),
CustKey			INT REFERENCES CUSTOMERS_DATA (CustomerKey),
ProductKey		INT REFERENCES PRODUCTS_DATA (ProductKey), 
SaleAmount		FLOAT		CHECK (SaleAmount >= 1)			DEFAULT 1,
TaxAmount		FLOAT		CHECK (TaxAmount >= 0.5)		DEFAULT 0.5,
NetAmount		AS  SaleAmount + TaxAmount					-- COMPUTED COLUMN : NO DATA TYPE
)
				 
-- INSERT DATA
INSERT INTO CUSTOMERS_DATA VALUES (1001, 'JOHN', 'M','M', 250000)
INSERT INTO CUSTOMERS_DATA VALUES (1002, 'AMIN',  'M','S', 150000)
INSERT INTO CUSTOMERS_DATA VALUES (1003, 'SAI',  'M','S', 200000)
INSERT INTO CUSTOMERS_DATA VALUES (1004, 'SAISHA', 'M','S', 700000)

INSERT INTO PRODUCTS_DATA VALUES (101, 'CAPS', 'M', 'RED', 2, 2020),		(102, 'CAPS', 'H', 'RED', 2, 2019)
INSERT INTO PRODUCTS_DATA VALUES (103, 'GLOVES', 'M', 'GREEN', 2, 2023),	(104, 'GLOVES', 'H', 'GREEN', 2,2023 )
INSERT INTO PRODUCTS_DATA VALUES (105, 'ELECTRONICS-1', 'M', 'WHITE', 10,2019),	(106, 'ELECTRONICS-2', 'M', 'WHITE',9, 2023)  


INSERT INTO SALES_DATA VALUES (1001, 101, 6300, 130)
INSERT INTO SALES_DATA VALUES (1002, 104, 9500, 180)
INSERT INTO SALES_DATA VALUES (1003, 101, 2300, 330)
INSERT INTO SALES_DATA VALUES (1001, 104, 1900, 180)
INSERT INTO SALES_DATA VALUES (1002, 102, 3020, 130)
INSERT INTO SALES_DATA VALUES (1003, 104, 9200, 380)
INSERT INTO SALES_DATA VALUES (1001, 105, 3100, 304)
INSERT INTO SALES_DATA VALUES (1002, 105, 1900, 840)
INSERT INTO SALES_DATA VALUES (1003, 102, 5300, 320)
INSERT INTO SALES_DATA VALUES (1003, 104, 9600, 280)
INSERT INTO SALES_DATA VALUES (1002, 102, 3070, 230)
INSERT INTO SALES_DATA VALUES (1004, 104, 91200, 3800) 


SELECT * FROM PRODUCTS_DATA 
SELECT * FROM CUSTOMERS_DATA  

SELECT * FROM SALES_DATA   



SELECT * FROM PRODUCTS_DATA 

SELECT * FROM SALES_DATA 


-- HOW TO REPORT PRODUCT WISE SALES?
SELECT * FROM PRODUCTS_DATA 
JOIN SALES_DATA 
ON 
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 


SELECT ProductName, SaleAmount FROM PRODUCTS_DATA 
JOIN SALES_DATA 
ON 
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 


-- HOW TO REPORT PRODUCT WISE TOTAL SALES?
SELECT ProductName, SUM(SaleAmount) AS TOTALSALES FROM PRODUCTS_DATA 
JOIN SALES_DATA 
ON 
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
GROUP BY ProductName


-- HOW TO REPORT PRODUCT WISE, CLASS WISE TOTAL SALES?
SELECT ProductName, Class, SUM(SaleAmount) AS TOTALSALES FROM PRODUCTS_DATA 
JOIN SALES_DATA 
ON 
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
GROUP BY ProductName, Class



-- HOW TO REPORT PRODUCT WISE, COLOR WISE, CLASS WISE TOTAL SALES?
SELECT		ProductName, Color, Class, SUM(SaleAmount) AS TOTALSALES FROM PRODUCTS_DATA 
JOIN SALES_DATA 
ON 
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
GROUP BY	ProductName, Color, Class


-- HOW TO JOIN MORE THAN 2 TABLES?
-- (A JOIN B) JOIN C

-- EXAMPLE: HOW TO REPORT DATA FROM PRODUCTS, SALES AND CUSTOMERS TABLES?
SELECT * FROM SALES_DATA 
INNER JOIN PRODUCTS_DATA 
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey 
JOIN CUSTOMERS_DATA 
ON
SALES_DATA.CustKey = CUSTOMERS_DATA.CustomerKey 


-- EXAMPLE: HOW TO REPORT PRODUCT WISE, COLOR WISE, CLASS WISE TOTAL SALES, CUSTOMER COUNT ?
SELECT  PRODUCTS_DATA.Class, PRODUCTS_DATA.Color, PRODUCTS_DATA.ProductName, SUM(SALES_DATA.SaleAmount) AS TOTAL_SALES
FROM SALES_DATA 
INNER JOIN PRODUCTS_DATA 
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey 
JOIN CUSTOMERS_DATA 
ON
SALES_DATA.CustKey = CUSTOMERS_DATA.CustomerKey 
GROUP BY  PRODUCTS_DATA.Class, PRODUCTS_DATA.Color, PRODUCTS_DATA.ProductName


SELECT  PRODUCTS_DATA.Class, PRODUCTS_DATA.Color, PRODUCTS_DATA.ProductName, 
SUM(SALES_DATA.SaleAmount) AS TOTAL_SALES, COUNT(CustomerKey) AS CUSTOMER_COUNT
FROM SALES_DATA 
INNER JOIN PRODUCTS_DATA 
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey 
JOIN CUSTOMERS_DATA 
ON
SALES_DATA.CustKey = CUSTOMERS_DATA.CustomerKey 
GROUP BY  PRODUCTS_DATA.Class, PRODUCTS_DATA.Color, PRODUCTS_DATA.ProductName




SELECT  PRODUCTS_DATA.Class, PRODUCTS_DATA.Color, PRODUCTS_DATA.ProductName, 
SUM(SALES_DATA.SaleAmount) AS TOTAL_SALES, COUNT(CustomerKey) AS CUSTOMER_COUNT
FROM SALES_DATA 
INNER JOIN PRODUCTS_DATA 
ON
SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey 
JOIN CUSTOMERS_DATA 
ON
SALES_DATA.CustKey = CUSTOMERS_DATA.CustomerKey 
WHERE		CLASS IS NOT NULL
GROUP BY	PRODUCTS_DATA.Class, PRODUCTS_DATA.Color, PRODUCTS_DATA.ProductName
HAVING		SUM(SALES_DATA.SaleAmount) > 1000
ORDER BY	TOTAL_SALES DESC

/* QUERY EXECUTION ORDER:
		FROM			>>
								JOIN				>>>
															WHERE			>>>
																					GROUP BY		>>
																										HAVING				>>
																														ORDER BY & SELECT 
*/
-- RULE	1:	WE CAN USE COLUMN ALIASES ONLY IN ORDER BY & SELECT
-- RULE 2:	WE CAN USE TABLE ALIASES ANY WHERE. 

SELECT  P.Class, P.Color, P.ProductName, 
SUM(S.SaleAmount) AS TOTAL_SALES, COUNT(C.CustomerKey) AS CUSTOMER_COUNT
FROM SALES_DATA AS S
INNER JOIN PRODUCTS_DATA AS P
ON
S.ProductKey = P.ProductKey 
JOIN CUSTOMERS_DATA  AS C
ON
S.CustKey = C.CustomerKey 
WHERE		CLASS IS NOT NULL
GROUP BY	P.Class, P.Color, P.ProductName
HAVING		SUM(S.SaleAmount) > 1000
ORDER BY	TOTAL_SALES DESC


































































-- QUERY 1:	HOW TO REPORT PRODUCT WISE SALES?
-- PRODUCTS DATA IS IN PRODUCTS TABLE.  SALES IN SALES TABLE. WE NEED TO REPORT BOTH. SO, WE USE "JOIN"
-- LETS CONSIDER PRODUCTS AND RESPECTIVE SALES. MEAN, INNER JOIN. MATCHING DATA.
SELECT * FROM PRODUCTS_DATA
INNER JOIN SALES_DATA
ON
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 


-- QUERY 2:	HOW TO REPORT PRODUCT NAMES, SALE AMOUNTS?
SELECT PRODUCTS_DATA.ProductName, SALES_DATA.SaleAmount FROM PRODUCTS_DATA
INNER JOIN SALES_DATA
ON
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 


SELECT PRODUCTS_DATA.ProductName, SUM(SALES_DATA.SaleAmount) FROM PRODUCTS_DATA
INNER JOIN SALES_DATA
ON
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
GROUP BY PRODUCTS_DATA.ProductName


SELECT PRODUCTS_DATA.Class, PRODUCTS_DATA.ProductName, SUM(SALES_DATA.SaleAmount) AS TOTAL_SALES FROM PRODUCTS_DATA
INNER JOIN SALES_DATA
ON
PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
GROUP BY PRODUCTS_DATA.Class, PRODUCTS_DATA.ProductName


-- HOW TO JOIN MORE THAN TWO TABLES?
-- FORMAT : (A JOIN B) JOIN C ....
SELECT * FROM SALES_DATA 
INNER JOIN PRODUCTS_DATA 
ON SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey 



SELECT * FROM SALES_DATA 
INNER JOIN PRODUCTS_DATA 
ON SALES_DATA.ProductKey = PRODUCTS_DATA.ProductKey 
INNER JOIN CUSTOMERS_DATA 
ON SALES_DATA.CustKey = CUSTOMERS_DATA.CustomerKey 


SELECT PRODUCTS_DATA.ProductName, PRODUCTS_DATA.Class, 
SUM(SALES_DATA.SaleAmount) AS TOTAL_SALES, COUNT(CUSTOMERS_DATA.CustomerKey)  FROM PRODUCTS_DATA
INNER JOIN SALES_DATA
ON PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
INNER JOIN CUSTOMERS_DATA 
ON CUSTOMERS_DATA.CustomerKey = SALES_DATA.CustKey 
GROUP BY PRODUCTS_DATA.ProductName, PRODUCTS_DATA.Class


SELECT PRODUCTS_DATA.ProductName, PRODUCTS_DATA.Class, 
SUM(SALES_DATA.SaleAmount) AS TOTAL_SALES, COUNT(CUSTOMERS_DATA.CustomerKey) AS CUSTOMERCOUNT FROM PRODUCTS_DATA
INNER JOIN SALES_DATA
ON PRODUCTS_DATA.ProductKey = SALES_DATA.ProductKey 
INNER JOIN CUSTOMERS_DATA 
ON CUSTOMERS_DATA.CustomerKey = SALES_DATA.CustKey 
GROUP BY PRODUCTS_DATA.ProductName, PRODUCTS_DATA.Class


-- REWRITE ABOVE QUERY USING TABLE ALIASES:
SELECT P.ProductName, P.Class, 
SUM(S.SaleAmount) AS TOTAL_SALES, COUNT(C.CustomerKey) AS CUSTOMERCOUNT FROM PRODUCTS_DATA AS P
INNER JOIN SALES_DATA AS S
ON P.ProductKey = S.ProductKey 
INNER JOIN CUSTOMERS_DATA AS C
ON C.CustomerKey = S.CustKey 
GROUP BY P.ProductName, P.Class


SELECT P.ProductName, P.Class, 
SUM(S.SaleAmount) AS TOTAL_SALES, COUNT(C.CustomerKey) AS CUSTOMERCOUNT FROM PRODUCTS_DATA AS P
INNER JOIN SALES_DATA AS S
ON P.ProductKey = S.ProductKey 
INNER JOIN CUSTOMERS_DATA  AS C
ON C.CustomerKey = S.CustKey 
WHERE P.Class IS NOT NULL
GROUP BY P.ProductName, P.Class
HAVING SUM(S.SaleAmount) > 1000
ORDER BY TOTAL_SALES ASC

/* FINAL QUERY EXECUTION ORDER:		FROM
										>> JOIN 
													>> WHERE 
															>> GROUP BY
																	>> HAVING

																			>> SELECT, ORDER BY  */

-- RULE 1:		COLUMN ALIASES CAN BE USED ONLY IN SELECT & ORDER BY.
-- RULE 2:		TABLE ALIASES CAN BE USED ANY WHERE IN THE QUERY: SELECT, JOIN, WHERE, GROUP BY, HAVING, ORDER BY. 







