
CREATE DATABASE ONLINE_RSV_DATABASE


USE ONLINE_RSV_DATABASE

 
-- 1ST TABLE:
CREATE TABLE FLIGHT
(	
	CRAFTCODE VARCHAR(30),	 
	SOURCE VARCHAR(30) NOT NULL,
	DESTINATION VARCHAR(30)
)


INSERT INTO FLIGHT VALUES ('EMI101', 'HYB', 'NYC') 
INSERT INTO FLIGHT VALUES ('EMI102', 'HYB', 'LSA')
INSERT INTO FLIGHT VALUES ('EMI103', 'HYB', 'LSA')
INSERT INTO FLIGHT VALUES ('EMI104', 'HYB', 'LSA')
INSERT INTO FLIGHT VALUES ('EMI106', 'HYB', 'LSA')

SELECT * FROM FLIGHT


-- HOW TO ADD PRIMARY KEY TO EXISTING TABLE?
-- STEP 1:  MODIFY THE COLUMN NULLABILITY PROPERTY TO NOT NULL
ALTER TABLE FLIGHT ALTER COLUMN CRAFTCODE VARCHAR(30) NOT NULL


-- STEP 2:	ADD PRIMARY KEY CONSTRAINT
ALTER TABLE FLIGHT ADD CONSTRAINT PK_CRAFTCODEID  PRIMARY KEY(CRAFTCODE)






-- HOW TO ADD PRIMARY KEY TO EXISTING TABLE?
ALTER TABLE FLIGHT ALTER COLUMN CRAFTCODE VARCHAR(30) NOT NULL

ALTER TABLE FLIGHT ADD CONSTRAINT PK_CRAFTCODE PRIMARY KEY (CRAFTCODE)
 

-- 2ND TABLE:
CREATE TABLE Reservation
(
	CRAFT_CODE varchar(30),	
	No_of_Seats int ,
	Class_Code varchar(10) 
)

 
-- HOW TO ADD CHECK CONSTRAINT TO EXISTING TABLE?
ALTER TABLE Reservation ADD CONSTRAINT CK_No_of_Seats CHECK (No_of_Seats >= 1)


INSERT INTO Reservation VALUES ('EMI101', 1, 'ECO') 
INSERT INTO Reservation VALUES ('EMI102', 4, 'BIZ') 
INSERT INTO Reservation VALUES ('EMI103', 2, 'BIZ')
INSERT INTO Reservation VALUES ('EMI103', 1, 'BIZ')
INSERT INTO Reservation VALUES ('EMI103', 4, 'BIZ')
INSERT INTO Reservation VALUES ('EMI104', 2, 'BIZ')		
INSERT INTO Reservation VALUES ('EMI104', 5, 'BIZ')			 
INSERT INTO Reservation VALUES ('EMI105', 5, 'BIZ')	
INSERT INTO Reservation VALUES ('EMI105', 4, 'BIZ')	


SELECT * FROM FLIGHT			-- 5 ROWS
SELECT * FROM Reservation		-- 9 ROWS


-- REQUIREMENT 1: WRITE A QUERY TO REPORT LIST OF FLIGHTS AND RESPECTIVE RESERVATIONS ? 
-- IN THIS REQUIREMENT, WE NEED TO COMPARE THE TABLES & IDENTIFY MATCHING DATA. 
-- HENCE WE NEED TO USE "INNER JOIN"

SELECT * FROM FLIGHT 
INNER JOIN 
Reservation 
ON FLIGHT.CRAFTCODE = Reservation.CRAFT_CODE


-- REQUIREMENT 2: WRITE A QUERY TO REPORT LIST OF FLIGHTS WITH, WITHOUT RESERVATIONS ? 
SELECT *	FROM  
FLIGHT     				-- LEFT   TABLE
LEFT OUTER JOIN
Reservation				-- RIGHT  TABLE
ON FLIGHT.CRAFTCODE = Reservation.CRAFT_CODE 


-- REQUIREMENT 3: WRITE A QUERY TO REPORT LIST OF FLIGHTS WITHOUT RESERVATIONS ? 
SELECT *	FROM  
FLIGHT     			-- LEFT   TABLE
LEFT OUTER JOIN
Reservation				-- RIGHT  TABLE
ON FLIGHT.CRAFTCODE = Reservation.CRAFT_CODE 
WHERE Reservation.CRAFT_CODE  IS NULL



-- REQUIREMENT 4: WRITE A QUERY TO REPORT LIST OF FLIGHTS WITH, WITHOUT RESERVATIONS ? 
SELECT *	FROM  
Reservation      			-- LEFT   TABLE
RIGHT OUTER JOIN
FLIGHT						-- RIGHT  TABLE
ON FLIGHT.CRAFTCODE = Reservation.CRAFT_CODE 


-- REQUIREMENT 5: WRITE A QUERY TO REPORT LIST OF FLIGHTS WITHOUT RESERVATIONS ? 
SELECT *	FROM  
Reservation      			-- LEFT   TABLE
RIGHT OUTER JOIN
FLIGHT						-- RIGHT  TABLE
ON FLIGHT.CRAFTCODE = Reservation.CRAFT_CODE 
WHERE Reservation.CRAFT_CODE  IS NULL


-- REQUIREMENT 6: WRITE A QUERY TO REPORT LIST OF FLIGHTS WITH, WITHOUT RESERVATIONS, RESEVATIONS WITH & WITHOUT FLIGHTS?
SELECT * FROM FLIGHT 				-- THIS IS LEFT TABLE
FULL OUTER JOIN						-- LEFT OUTER JOIN + RIGHT OUTER JOIN 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE



-- REQUIREMENT 7: WRITE A QUERY TO REPORT LIST OF FLIGHTS & RESERVATIONS. 
-- LIST ALL POSSIBLE PERMUTATIONS?
SELECT * FROM FLIGHT CROSS JOIN  RESERVATION							 

SELECT * FROM FLIGHT CROSS APPLY RESERVATION							 

SELECT * FROM FLIGHT, RESERVATION			

 

-- ALTERNATE SYNTAX:
SELECT * FROM FLIGHT 				-- THIS IS LEFT TABLE
JOIN						 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE



SELECT * FROM FLIGHT 				-- THIS IS LEFT TABLE
LEFT JOIN						 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE



SELECT * FROM FLIGHT 				-- THIS IS LEFT TABLE
RIGHT JOIN							 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE



SELECT * FROM FLIGHT 				-- THIS IS LEFT TABLE
FULL JOIN						 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE



SELECT FLIGHT.* FROM FLIGHT 				-- THIS IS LEFT TABLE
FULL JOIN						 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE


SELECT RESERVATION.* FROM FLIGHT 				-- THIS IS LEFT TABLE
FULL JOIN						 
RESERVATION							-- THIS IS RIGHT TABLE
ON
FLIGHT.CRAFTCODE = RESERVATION.CRAFT_CODE



/*
WHEN TO USE WHICH JOIN TYPE?
 	INNER				:	USED TO REPORT MATCHING DATA

	LEFT OUTER JOIN		:	USED TO REPORT MATCHING & MISSING DATA. ONE WAY COMPARISON. 
	RIGHT OUTER JOIN	:	USED TO REPORT MATCHING & MISSING DATA. ONE WAY COMPARISON. 
	
	FULL OUTER JOIN		:	USED TO REPORT COMBINED OUTPUT OF LEFT OUTER & RIGHT OUTER JOIN. TWO WAY COMPARISON. 
	
	CROSS JOIN			:	TO REPORT ALL POSSIBLE COMBINATIONS. USED FOR JOINING TABLES WITH FUNCTIONS. FOR AUDITS & TUNING.
*/

-- NEXT CLASSES			:	JOINING MORE THAN 2 TABLES 
							SELF JOINS
							CROSS APPLY
							TABLE ALIASES
							FUNCTIONS 
							CROSS APPLY