
USE UNIVERSITY_DATABASE

SELECT * FROM TBLCOURSES

-- GIVEN A TABLE, HOW TO REPORT LIST OF INDEXES?
EXECUTE SP_HELPINDEX 'TBLCOURSES'


-- HOW TO CREATE INDEX ON A TABLE?
CREATE INDEX INDX_NAME ON TBLCOURSES(COURSE_NAME)


EXECUTE SP_HELPINDEX 'TBLCOURSES'


-- ABOVE INDEX WILL BE USED INTERNALLY FOR FASTER SEARCH OF COURSE_NAME VALUES:
SELECT * FROM TBLCOURSES WHERE COURSE_NAME LIKE 'C%'

-- WHENEVER WE DEFINE A PRIMARY KEY :	ONE CLUSTERED INDEX IS AUTO CREATED
-- WHENEVER WE DEFINE A UNIQUE KEY :	ONE NONCLUSTERED INDEX IS AUTO CREATED
-- NO SUCH AUTOMATED INDEXES FOR FOREIGN KEY.

-- QUERY OPTIMIZER (QO) : THIS IS AN INTERNAL COMPONENT USED TO IDENTIFY THE BEST INDEX FOR EXECUTING ANY QUERY.


-- HOW TO REPORT LIST OF COURSES AND RESPECTIVE STUDENTS?
SELECT COURSE_ID, COURSE_NAME, COURSE_DUR, STD_ID, STD_NAME, STD_AGE	FROM  
TBLCOURSES    			-- LEFT   TABLE
INNER JOIN
TBLSTUDENTS				-- RIGHT  TABLE
ON TBLCOURSES.COURSE_ID = TBLSTUDENTS.STD_COURSE_ID



-- HOW TO OPTIMIZE (TUNE) ABOVE QUERY?
-- STEP 1 : ANALYSE THE COLUMNS USED IN THE QUERY	:	COURSE_ID, COURSE_NAME, COURSE_DUR, STD_ID, STD_NAME, STD_AGE

-- STEP 2 : IDENTIFY THE INDEXED COLUMNS			:	COURSE_ID, STD_ID

-- STEP 3 : DEFINE INDEXES FOR SUCH COLUMNS WHICH ARE NOT INDEXED BUT USED IN CONDITIONS: STD_COURSE_ID

CREATE INDEX INDEX_JOIN ON TBLSTUDENTS (STD_COURSE_ID)



















-- QUERY 6: 
CREATE TABLE TBLSTUDENTS
(
STD_ID INT UNIQUE,			-- THIS COLUMN DOES NOT ALLOW DUPLICATES. ALLOW UPTO 1 NULL VALUE. 
STD_NAME VARCHAR(30),
STD_AGE INT CHECK (STD_AGE >= 18),
STD_COURSE_ID INT REFERENCES TBLCOURSES (COURSE_ID)				-- VALUE DEPENDANCY
)

-- QUERY 7: 
INSERT  INTO  TBLSTUDENTS VALUES (1001, 'SAI', 34, 101)			-- MR. SAI IS ENROLLED FOR COMPUTERS COURSE
INSERT  INTO  TBLSTUDENTS VALUES (1002, 'JON', 34, 101)			-- MR. JON IS ENROLLED FOR COMPUTERS COURSE
INSERT  INTO  TBLSTUDENTS VALUES (1003, 'JOHNE', 34, 102)		-- THIS STUDENT IS ENROLLED FOR ROBOTICS COURSE
INSERT  INTO  TBLSTUDENTS VALUES (1004, 'JOHNY', 34, 102)		-- THIS STUDENT IS ENROLLED FOR ROBOTICS COURSE


-- QUERY 8: 
SELECT * FROM TBLSTUDENTS


-- QUERY 9 : 
-- TESTING FOREIGN KEY CONSTRAINT:
INSERT  INTO  TBLSTUDENTS VALUES (1005, 'JENY', 30, 999)		-- ERROR; REASON : INVALID COURSE ID. FK ERROR. 


-- QUERY 10 : 
CREATE TABLE TBLSTAFF
(
StfID INT IDENTITY (100001, 1),		-- START VALUE = SEED = 100001	;	INCREMENT = STEP = 1
StfName varchar(30) NOT NULL,
StfAge INT CHECK (StfAge >= 30) DEFAULT 30,
StfCourseID INT REFERENCES TBLCOURSES (COURSE_ID) 
)

-- QUERY 11:
INSERT  INTO  TBLSTAFF VALUES ('AMI', 34, 101)			-- AMI IS RECRUITED FOR COMPUTERS COURSE
INSERT  INTO  TBLSTAFF VALUES ('AMIN', 34, 101)			-- AMIN IS RECRUITED FOR COMPUTERS COURSE
INSERT  INTO  TBLSTAFF VALUES ('AMINI', 34, 102)		-- AMINI IS RECRUITED FOR ROBOTICS COURSE 


-- QUERY 12:
SELECT * FROM TBLSTAFF


-- QUERY 13:	HOW TO INSERT DEFAULT VALUES INTO A TABLE?
-- RULE :		WE NEED TO SPECIFY REMAINING COLUMNS AND THEIR VALUES. MISSING COLUMNS WILL TAKE DEFAULT VALUES.
INSERT  INTO  TBLSTAFF(StfName, StfCourseID) VALUES ('AMINISH', 102)	-- AGE IS MISSING. IT TAKES DEFAULT VALUE : 30	 
SELECT * FROM TBLSTAFF


-- QUERY 14:	HOW TO ADD PRIMARY KEY TO EXISTING TABLE?
ALTER TABLE TBLSTAFF ALTER COLUMN StfID INT NOT NULL
ALTER TABLE TBLSTAFF ADD CONSTRAINT CK_PK_ID PRIMARY KEY (StfID)
 
 


-- NEXT	:	COMPOSITE KEYS				SELF REFERENCING KEYS			CANDIDATE KEYS	


