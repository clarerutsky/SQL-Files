
-- QUERY 1:	HOW TO CONNECT TO AN EXISTING DATABASE?
CREATE DATABASE   EMPLOYEEDATABASEV3
GO
USE    EMPLOYEEDATABASEV3 

			
-- QUERY 2: CREATE TABLE, INSERT DATA? 
CREATE TABLE EMPLOYEE_INFO
(
EMPID INT PRIMARY KEY,				
EMP_NAME CHAR(30),		
EMP_COUNTRY VARCHAR(40),
EMPSAL FLOAT			
)

INSERT  INTO EMPLOYEE_INFO VALUES (1001, 'SAI', 'CANADA', 999999)
INSERT	INTO EMPLOYEE_INFO VALUES (1002, 'SAM', 'CANADA', 888888)
INSERT  INTO EMPLOYEE_INFO VALUES (1003, 'JON', 'CANADA', 999999);
INSERT	INTO EMPLOYEE_INFO VALUES (1004, 'AMI', 'CANADA', 777777);
INSERT  INTO EMPLOYEE_INFO VALUES (1005, 'JOE', 'USA', 999999), (1006, 'ANI', 'USA', 999999);
INSERT	INTO EMPLOYEE_INFO VALUES (1007, 'AMI', 'USA', 777777), (1008, 'AMIN', 'INDIA', 999999);
INSERT	INTO EMPLOYEE_INFO VALUES (1009, 'KIR', 'INDIA', 777777)  
INSERT	INTO EMPLOYEE_INFO VALUES (1010, 'JENY', 'USA', 9999999)  
INSERT	INTO EMPLOYEE_INFO VALUES (1011, 'JENISHA', 'INDIA', 99999999)  


-- QUERY 3: HOW TO REPORT DATA FROM AN EXISTING TABLE?
SELECT * FROM EMPLOYEE_INFO


-- QUERY 4: HOW TO REPORT EMPLOYEES FROM CANADA?
SELECT * FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = 'CANADA'


-- QUERY 5: WRITE A FUNCTION TO REPORT LIST OF EMPLOYEES FROM A GIVEN COUNTRY?
CREATE FUNCTION FN_REPORT_EMPLIST (@COUNTRY VARCHAR(30))
RETURNS TABLE
AS
RETURN (SELECT * FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = @COUNTRY)


-- QUERY 6: HOW TO TEST ABOVE FUNCTION ?
SELECT * FROM FN_REPORT_EMPLIST ('CANADA')

SELECT * FROM FN_REPORT_EMPLIST ('CANADA') WHERE EMPSAL > 777777 ORDER BY EMPID DESC


-- PROCEDURES	:	THE RESULT CANNOT BE FURTHER FILTERED OR ORDERED OR JOINED DIRECTLY.
-- FUNCTION		:	THE RESULT CAN BE FURTHER FILTERED OR ORDERED OR JOINED DIRECTLY.


-- QUERY 7: WRITE A FUNCTION TO REPORT COUNT OF EMPLOYEES FROM A GIVEN COUNTRY?			scalar value
-- error:
CREATE FUNCTION FN_REPORT_EMPLIST (@COUNTRY VARCHAR(30))
RETURNS int
AS
RETURN (SELECT count(*) FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = @COUNTRY)


-- correct statement:
CREATE FUNCTION FN_REPORT_EMPCOUNT (@COUNTRY VARCHAR(30))
RETURNS int
AS
BEGIN
RETURN (SELECT count(*) FROM EMPLOYEE_INFO WHERE EMP_COUNTRY = @COUNTRY)
END


-- RULE FOR EXECUTING THE SCALAR VALUE RETURNING FUNCTION ?
SELECT 10

SELECT 100

SELECT 'ABC'

SELECT dbo.FN_REPORT_EMPCOUNT('CANADA')


SELECT dbo.FN_REPORT_EMPCOUNT('CANADA') EMP_COUNT

SELECT dbo.FN_REPORT_EMPCOUNT('USA') AS EMPCOUNT


-- SYSTEM FUNCTIONS		: THESE ARE PREDEFINED FUNCTIONS IN EVERY DATABASE. 
-- HOW TO KNOW THE CURRENTLY CONNECTED DATABASE NAME?
SELECT DB_NAME()


-- HOW TO KNOW THE CURRENTLY CONNECTED DATABASE ID?
SELECT DB_ID()


--  DATE & TIME FUNCTIONS: 
SELECT GETDATE()					-- TO REPORT TODAY'S DATE & TIME
SELECT DAY(GETDATE())				-- TO REPORT DAY OF THE MONTH
SELECT MONTH(GETDATE())				-- TO REPORT CURRENT MONTH NUMBER
SELECT YEAR(GETDATE())				-- TO REPORT CURRENT YEAR

SELECT DATENAME(m, GETDATE())		-- TO REPORT CURRENT MONTH NAME


-- FOR DATA ANALYSTS & DATA ENGINEERS, ETL ADMINS:
-- HOW TO REPORT DATE IN VARIOUS FORMATS? 
-- SYNTAX:	CONVERT (<<TARGET DATA TYPE>>, DATE VALUE, PREDEFINED STYLE)
SELECT convert(varchar(30), GETDATE(), 101)		-- REPORT DATE IN mm/dd/yyyy FORMAT
SELECT convert(varchar(30), GETDATE(), 102)		-- REPORT DATE IN yyyy.mm.dd FORMAT
SELECT convert(varchar(30), GETDATE(), 103)		-- REPORT DATE IN dd/mm/yyyy FORMAT
SELECT convert(varchar(30), GETDATE(), 104)		-- REPORT DATE IN dd.mm.yyyy FORMAT
SELECT convert(varchar(40), GETDATE(), 105)		-- REPORT DATE IN dd-mm-yyyy FORMAT
SELECT convert(varchar(50), GETDATE(), 106)		-- REPORT DATE IN dd MON yyyy FORMAT
SELECT convert(varchar(30), GETDATE(), 107)		-- REPORT DATE IN MON dd, yyyy FORMAT


SELECT convert(varchar(30), GETDATE(), 108)		-- REPORT TIME IN hh:mm:ss FORMAT
SELECT convert(varchar(30), GETDATE(), 109)		-- REPORT DATE & TIME IN dd MON yyyy hh:mm:ss:ms FORMAT
 
SELECT DATEADD (d, 1, GETDATE())				-- TO ADD ONE MORE DAY TO CURRENT DATE
SELECT DATEDIFF(d, '2024-01-01', '2024-01-31')	-- TO FIND DIFFERENCE IN NUMBER OF DAYS BETWEEN TWO GIVEN DATE VALUES
SELECT DATEDIFF(m, '2023-01-01', '2024-01-31')	-- TO FIND DIFFERENCE IN NUMBER OF MONTHS BETWEEN TWO GIVEN DATE VALUES


-- STRING FUNCTIONS 
SELECT REPLACE('SQL SERVER', 'SQL','SEQUEL')	-- REPLACE TEXT IN A GIVEN STRING
SELECT REVERSE('SQL SERVER')					-- REVERSE THE TEXT
SELECT LEN('SQL SERVER')						-- REPORTS NUMBER OF CHARACTERS
SELECT UPPER('SQL Server')						-- REPORTS UPPER CASE TEXT
SELECT LOWER('SQL Server')						-- REPORTS LOWER CASE TEXT
SELECT SUBSTRING('SQL Server', 1, 5)			-- REPORTS 5 CHARACTERS FROM 1ST POSITION OF THE INPUT STRING
SELECT LEFT('SQL Server', 3)					-- REPORTS STARTING 3 CHARACTERS FROM STRING
SELECT RIGHT('SQL Server', 6)					-- REPORTS ENDING 6 CHARACTERS FROM STRING
SELECT ltrim ('  SQLserver')					-- TRUNCATE EXTRA SPACES  AT START OF THE TEXT
SELECT Rtrim ('SQLserver    ')					-- TRUNCATE EXTRA SPACES AT END OF THE TEXT
SELECT CHARINDEX('o' , 'Indigo Montoya');  		-- REPORT FIRST POSITION OF A GIVEN CHARACTER. EX : 'o' 


-- NEXT:	FUNCTIONS WITH QUERIES
-- IIF(), WINDOW / RANK(), ETC..

/*
WHITE RICE											BREAD											VIEWS					RLS


FRIED RICE											SANDWICH										FUNCTIONS				DYNAMIC REPORTING

BIRYANI												BURGER											PROCEDURE				CONDITIONAL DML		*/







