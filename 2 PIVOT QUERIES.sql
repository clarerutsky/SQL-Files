
/* 
PIVOT IS A MECHANISM TO NORMALISE A GIVEN TABLE. 
PIVOT IS A MECHANISM TO CONVERT UNIQUE COLUMN VALUES TO COLUMNS. 
PIVOT IS A MECHANISM TO CONVERT A BIG TABLE WITH MORE NUMBER OF ROWS TO A SMALL TABLE WITH MORE NUMBER OF COLUMNS. 

EX: 'SalesYear' COLUMN VALUES ARE : 2014, 2015, 2016, 2017.   */


/* SYNTAX FOR PIVOT:
<VALID TABLE EXPRESSION>
PIVOT (<AGGREGATE> FOR <PIVOT-KEY-COLUMN> IN (KEY VALUES TO DEFINE NEW COLUMNS) AS <ALIAS>
*/



CREATE TABLE ServiceSales (ServiceType VARCHAR(80), SalesYear INT, NoOfLeads int);
 
INSERT ServiceSales VALUES 	('SQL SEVER TRAINING', 2014, 1200),
	('SQL SEVER TRAINING', 2015, 1900),('SQL SEVER TRAINING', 2016, 2300);
INSERT ServiceSales VALUES	('SQL DBA TRAINING', 2014, 4000),
	('SQL DBA TRAINING', 2015, 5500), ('SQL DBA TRAINING', 2016, 5900);
INSERT ServiceSales VALUES	('MSBI TRAINING', 2014, 900),
	('MSBI TRAINING', 2015, 1800),   ('MSBI TRAINING', 2016, 2300)
INSERT ServiceSales VALUES	('POWER BI TRAINING',2016,150),('POWER BI TRAINING',2017,100);
INSERT ServiceSales VALUES	('AZURE ANALYTICS TRAINING',2016,150),('POWER BI TRAINING',2017,200);
INSERT ServiceSales VALUES	('CASE STUDIES n PROJECTS', 2015, 1000),
	('CASE STUDIES n PROJECTS', 2016, 2800),('CASE STUDIES n PROJECTS', 2017, 4000);

USE MASTER 
SELECT * FROM ServiceSales				 


-- REQUIREMENT:  HOW TO REPORT YEAR WISE TOTAL LEADS  FOR EACH SERVICE TYPE. YEARS SHOULD BE LISTED AS COLUMNS.
-- SOLUTION
SELECT * FROM ServiceSales
PIVOT (SUM(NoOfLeads) FOR SalesYear IN ([2014])) as PivotQuery 

SELECT * FROM ServiceSales
PIVOT (SUM(NoOfLeads) FOR SalesYear IN ([2014], [2015])) as PivotQuery 

SELECT * FROM ServiceSales
PIVOT (SUM(NoOfLeads) FOR SalesYear IN ([2014], [2015], [2016], [2017])) as PivotQuery 





USE [PRODUCT DATABASE]


SELECT	CalendarYear, SUM(SalesAmount) AS TOTAL_SALES
FROM TIME_DATA 
INNER JOIN
SALES_DATA
ON
SALES_DATA.OrderDateKey = TIME_DATA.TimeKey
GROUP BY CalendarYear


-- REQUIREMENT: HOW TO TURN / PIVOT QUERY OUTPUT.  YEARS SHOULD BE REPORTED SIDE BY SIDE.

-- PIVOT OPERATOR WILL TRANSPOSE A GIVEN TABLE OR A TABLE-VALUED EXPRESSION
-- IN PIVOT, UNIQUE COLUMN VALUES ARE REPORTED AS NEW COLUMNS.
-- AGGREGATES ARE FILLED IN THIS NEW COLUMNS

-- CATEGORY: CalendarYear
-- AGGREGATE: SalesAmount

-- CREATE A TEMPORARY RESULT FIRST. WITHOUT ANY AGGREGATIONS.
-- THEN APPLY PIVOT OPERATION ON THIS TEMPORARY RESULT.

SELECT * FROM (
	SELECT	CalendarYear, SalesAmount 
	FROM TIME_DATA 
	INNER JOIN
	SALES_DATA
	ON
	SALES_DATA.OrderDateKey = TIME_DATA.TimeKey
			 ) as TempResultSet
PIVOT (SUM(SalesAmount) FOR CalendarYear IN ([2001], [2002],[2003],[2004])) as PivotQuery 


-- PIVOT   =  GROUP BY  +  AGGREGATE + TRANSPOSE







SELECT	CalendarQuarter, SUM(SalesAmount) AS TOTAL_SALES
FROM TIME_DATA 
INNER JOIN
SALES_DATA
ON
SALES_DATA.OrderDateKey = TIME_DATA.TimeKey
GROUP BY CalendarQuarter


-- PIVOT QUERY:
SELECT * FROM
(
SELECT	CalendarQuarter, SalesAmount 
FROM TIME_DATA 
INNER JOIN
SALES_DATA
ON
SALES_DATA.OrderDateKey = TIME_DATA.TimeKey
) AS TEMPRESULT
PIVOT  ( SUM (SalesAmount)  FOR CalendarQuarter IN ( [1], [2], [3], [4]) ) AS Result;


PROJECT
-- DEBIT & CREDIT TRANSACTIONS. ONE BELOW THE OTHER. YOU NEED TO REPORT DEBITS @ 1 COLUMN, CREDIT S 2@ COLUMN