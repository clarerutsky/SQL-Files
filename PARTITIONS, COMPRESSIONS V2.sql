
-- ITEM #1: CREATE A NEW DATABASE
CREATE DATABASE EmployeResidnceDB
ON PRIMARY
( NAME = Primary_Metadata,   FILENAME = 'E:\Primary_DATA1.mdf'),
FileGroup CANADA_FG
( NAME = CANADA_data,    FILENAME = 'E:\CANADA_data1.ndf'),
FileGroup INDIA_FG
( NAME = INDIA_data,    FILENAME = 'E:\INDIAdata1.ndf'),
FileGroup USA_FG
( NAME = USA_Data,    FILENAME = 'E:\USA_Data1.ndf')


-- ITEM #2: CONNECT TO ABOVE DATABASE
use EmployeResidnceDB


-- REQUIREMENT: TO DIVIDE THE DATA IN THIS DATABASE BASED ON EMPLOYEE COUNTRY OF RESIDENCE


-- ITEM #3: DEFINE A PARTITION FUNCTION
CREATE PARTITION FUNCTION partFunction1(varchar(30))
AS RANGE LEFT									-- LEFT RANGE (<=)
FOR VALUES ('CANADA', 'INDIA', 'USA')			-- ALL VALUES SHOULD BE IN ALPHABETICAL ORDER 
												-- BOUNDARY VALUES : 3. SO TOTAL NUMBER OF RANGES : 4

/*
EXAMPLE:
FOR VALUES (1, 100)
					LEFT					RIGHT
PARTITION 1:		<= 1					< 1
PARTITION 2:		2 TO 100				1 TO 99
PARTITION 3:		101 & above				100 & above
*/


-- ITEM #4: DEFINE LOCATIONS FOR ABOVE PARTITION FUNCTIONS = PARTITION SCHEMES
CREATE PARTITION SCHEME partScheme				-- WE NEED TOTAL OF 4 LOCATIONS TO STORE ALL 4 RANGES DATA
AS PARTITION partFunction1 
TO ('CANADA_FG', 'INDIA_FG', 'USA_FG', 'PRIMARY')


-- ITEM #5: HOW TO PARTITION A NEW TABLE?
-- HOW TO USE ABOVE PARTITION SCHEME AND PARTITION FUNCTION?
CREATE TABLE Employee_Info
(
Emp_ID int,
Emp_FName varchar(15),
Emp_LName varchar(12),
Emp_CNTRY varchar(30)  check (Emp_CNTRY IN ('CANADA', 'INDIA','USA')),
Emp_Sal int
) ON partScheme(Emp_CNTRY)



-- ITEM #6: HOW TO INSERT DATA INTO ABOVE PARTITIONED TABLE?
insert into Employee_Info values(1001,'Amin',NULL,'USA',190856)
insert into Employee_Info values(1002,'Amini',NULL,'INDIA',130876)
insert into Employee_Info values(1003,'Ami',NULL,'CANADA',590876)
insert into Employee_Info values(1004,'Munish',NULL,'CANADA',490876)
insert into Employee_Info values(1005,'john',NULL,'INDIA',290876)
insert into Employee_Info values(1006,'johny',NULL,'INDIA',140876)
insert into Employee_Info values(1007,'jeff',NULL,'USA',199871)


-- ITEM #7: HOW TO VERIFY ABOVE TABLE DATA?
SELECT * FROM Employee_Info						-- NOTE: "PARTITION SCAN"


-- ITEM #8: HOW TO CHECK IF THE GIVEN TABLE IS PARTITIONED?
SELECT * FROM SYS.PARTITIONS WHERE OBJECT_ID = OBJECT_ID('Employee_Info')


-- ITEM #9: HOW TO PARTITION AN UNPARTITIONED TABLE?
CREATE TABLE Employee_InfoV2
(
Emp_ID int,
Emp_FName varchar(15),
Emp_LName varchar(12),
Emp_CNTRY varchar(30) check (Emp_CNTRY IN ('CANADA', 'INDIA', 'USA')),
Emp_Sal int
)  


-- ITEM #10: HOW TO INSERT DATA INTO ABOVE TABLE?
insert into Employee_InfoV2 values(1001,'Shekar',NULL,'USA',190856), (1002,'Muni',NULL,'INDIA',130876)
insert into Employee_InfoV2 values(1003,'Muni Shekar',NULL,'CANADA',590876),(1004,'Munish',NULL,'CANADA',490876)
insert into Employee_InfoV2 values(1005,'john',NULL,'INDIA',290876), (1006,'johny',NULL,'INDIA',140876)
insert into Employee_InfoV2 values(1007,'jeff',NULL,'USA',199871)


-- ITEM #11: HOW TO VERIFY ABOVE TABLE DATA INSERTS?
SELECT * FROM Employee_InfoV2   


-- ITEM #12: HOW TO PARTITION AN UNPARTITIONED TABLE? 
SELECT * FROM SYS.PARTITIONS WHERE object_id = OBJECT_ID('Employee_InfoV2')				 -- 1


-- ITEM #13: HOW TO PARTITION AN UNPARTITIONED TABLE?
CREATE CLUSTERED INDEX IX_CLUSTERED_EMPINFO  ON Employee_InfoV2(Emp_ID) ON partScheme(Emp_CNTRY)


-- ITEM #14: HOW TO VERIFY THE ABOVE PARTITIONS?
SELECT * FROM SYS.PARTITIONS WHERE OBJECT_ID = OBJECT_ID('Employee_InfoV2')				-- 4 PARTITIONS



/* PARTITION MANAGEMENT */
-- ITEM #14: HOW TO MANAGE or EDIT PARTITIONS?
-- OPTION 1: PARTITION SPLIT
-- OPTION 2: PARTITION MERGE


-- PARTITION SPLIT  : A MECHANISM TO ADD NEW PARTITIONS TO EXISTING LIST OF VALUES. 
-- TABLE DATA IS AUTOMATICALLY REARRANGED.
ALTER PARTITION SCHEME partScheme   NEXT USED [PRIMARY]									-- ANY OTHER FILEGROUP
ALTER PARTITION FUNCTION  partFunction1()	SPLIT RANGE ('UK')							-- 4 + 1 RANGES


-- HOW TO TEST ABOVE PARTITIONS?
SELECT * FROM SYS.PARTITIONS WHERE OBJECT_ID = OBJECT_ID('Employee_InfoV2')				-- 5 PARTITIONS


-- PARTITION MERGE : A MECHANISM TO REDUCE (COMBINE THE DATA FROM) EXISTING PARTITIONS. 
-- TABLE DATA AUTOMATICALLY REARRANGED.
ALTER PARTITION FUNCTION  partFunction1() MERGE RANGE ('USA')		-- CANADA   INDIA     UK					


-- ITEM #15: HOW TO VERIFY ABOVE PARTITION MERGE?
SELECT * FROM SYS.PARTITIONS WHERE OBJECT_ID = OBJECT_ID('Employee_InfoV2')				-- 4 PARTITIONS
			  
 

-- ITEM # 16: DATA ARCHIVAL : A MECHANISM TO MOVE DATA FROM A SPECIFIC PARTITION OF THE TABLE TO ANOTHER TABLE. CUT & PASTE.
-- APPLICABLE FOR COLD DATA (INACTIVE DATA FROM AN OLTP TABLE TO DWH): 
-- REQUIREMENT :	HOW TO ARCHIVE A CANADA DATA ?
-- STEP 1: CREATE A NEW TABLE WITH THE SAME STRUCTURE AND FILEGROUP AS PER THE SOURCE PARTITION
CREATE TABLE Employee_InfoV2_Canada
(
Emp_ID int,
Emp_FName varchar(15),
Emp_LName varchar(12),
Emp_CNTRY varchar(30)  check (Emp_CNTRY IN ('CANADA', 'INDIA', 'USA')),
Emp_Sal int
) ON CANADA_FG


-- STEP 2: SWITCH THE PARTITION 
ALTER TABLE Employee_Info SWITCH PARTITION 1 TO Employee_InfoV2_Canada; 


--- STEP 3: VERIFY THE ARCHIVED TABLE
SELECT * FROM Employee_InfoV2_Canada

SELECT * FROM Employee_Info



/*
COMPRESSION : A MECHANISM TO IDENTIFY UNIQUE VALUES OF THE TABLE AND STORE THE DATA IN SUCH A WAY WE SAVE SPACE.

TYPES OF COMPRESSION:
*	1. ROW COMPRESSION		:	APPLICABLE FOR COLUMNS WITH SIMILAR DATA.	EX:  GENDER & MARITAL STATUS HAVE SAME VALUE : M
	2. PAGE COMPRESSION		:	APPLICABLE FOR ROWS WITH SIMILAR DATA.		EX:  SAME PRODUCT SOLD TO SAME CUSTOMER ON SAME DAY MORE THAN ONCE
*/

-- COMPRESSIONS ARE NOT RECOMMENDED FOR REGULAR, OLTP DATABASE TABLES.
-- COMPRESSIONS ARE HIGHLY RECOMMENDED FOR DWH : OLD, INACTIVE, ARCHIVED DATA. 

-- ITEM #16: HOW TO COMPRESS THE ENTIRE TABLE?
ALTER TABLE Employee_Info
REBUILD
WITH
(
DATA_COMPRESSION = ROW
)

select * from sys.partitions where object_id = object_id('Employee_Info')


-- ITEM #17: HOW TO COMPRESS A SPECIFIC PARTITION?
ALTER TABLE Employee_Info
REBUILD PARTITION = 1
WITH 
(
DATA_COMPRESSION = PAGE 
)

-- ITEM #18: HOW TO VERIFY THE ABOVE COMPRESSION?
select * from sys.partitions where object_id = object_id('Employee_Info')








